generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id             String @id @default(uuid())
  firstName      String
  lastName       String
  email          String @unique
  role           Role   @default(STUDENT)
  hashedPassword String

  lastLogin        DateTime @default(now())
  firstLogin       DateTime @default(now())
  stripeCustomerId String

  createdLessons          Lesson[]
  videosProgress          UserVideoProgress[]
  chapterQuestionsAnswers ChapterQuestionsAnswers[]
  comments                Comment[]
  purchases               Purchase[]
}

model Lesson {
  id              String  @id @default(uuid())
  title           String
  description     String?
  picturePath     String?
  markdownContent String?
  isPublished     Boolean @default(false)

  chapters  Chapter[]
  purchases Purchase[]

  teacherId String
  teacher   User   @relation(fields: [teacherId], references: [id])

  categoryName String?
  category     Category? @relation(fields: [categoryName], references: [name])
}

model Chapter {
  id              String  @id @default(uuid())
  position        Int     @default(autoincrement())
  title           String
  markdownContent String?
  videoPath       String?
  videoDuration   Int?
  isPublished     Boolean @default(false)
  isFree          Boolean @default(false)

  lessonId String

  lesson                  Lesson                    @relation(fields: [lessonId], references: [id])
  questions               Question[]
  usersVideoProgress      UserVideoProgress[]
  chapterQuestionsAnswers ChapterQuestionsAnswers[]
  comments                Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id            String   @id @default(uuid())
  question      String
  answers       String[]
  correctAnswer String

  chapterId String

  chapter Chapter @relation(fields: [chapterId], references: [id])
}

model UserVideoProgress {
  chapterId    String
  userId       String
  watchedUntil Int

  chapter Chapter @relation(fields: [chapterId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([chapterId, userId])
}

model ChapterQuestionsAnswers {
  userId     String
  chapterId  String
  answeredAt DateTime

  user    User    @relation(fields: [userId], references: [id])
  chapter Chapter @relation(fields: [chapterId], references: [id])

  @@unique([chapterId, userId])
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  deletedAt DateTime?
  createdAt DateTime  @default(now())

  editedCommentId String?  @unique
  editedComment   Comment? @relation("EditCommentHistory", fields: [editedCommentId], references: [id])
  previousComment Comment? @relation("EditCommentHistory")

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
}

model Purchase {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Category {
  name    String   @unique
  lessons Lesson[]
}
