type Mutation {
  "Check user responses and store them the first time it is correct"
  submitQuiz(
    chapterId: String!
    answers: [QuestionAnswerInput!]!
  ): SubmitQuizResponse!

  "Upsert a user video watch progress"
  saveVideoProgress(chapterId: String!, watchedUntil: Int!): Boolean!

  "Create a lesson"
  createLesson(title: String!): Lesson!

  "Update a lesson"
  updateLesson(lessonId: String!, input: LessonInput!): Lesson!

  "Add or update a chapter"
  upsertChapter(
    lessonId: String!
    chapterId: String
    input: ChapterInput!
    videoFile: Upload
  ): Chapter!

  "Create a user"
  registerUser(input: RegisterInput!): UserWithTokens!

  "Login a user using email and password"
  loginUser(email: String!, password: String!): UserWithTokens!

  "Use cookie to refresh the access token"
  refreshToken: Tokens!

  "Admin only - Create a category"
  createCategory(name: String!): Category!

  "Update chapters position"
  orderChapters(
    lessonId: String!
    chaptersOrder: [ChapterOrderInput!]!
  ): Boolean!

  #  "Add a new comment and connect it to a contact"
  createComment(chapterId: String!, content: String!): Comment!

  # "Soft delete a comment"
  deleteComment(commentId: String!): Comment!

  # "Edit an existing comment"
  editComment(commentId: String!, content: String!): Comment!
}

type SubmitQuizResponse {
  isValid: Boolean!
  incorrectQuestionsId: [String!]!
}

type Tokens {
  accessToken: String!
  refreshToken: String!
}

type UserWithTokens {
  user: User!
  tokens: Tokens!
}

input ChapterOrderInput {
  chapterId: String!
  position: Int!
}
